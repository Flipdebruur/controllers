from machine import Pin, PWM
import time
from WaveShaker import *

# Speed control using PWM
ENA = PWM(Pin(25), freq=1000)  # Motor A speed
ENB = PWM(Pin(33), freq=1000)  # Motor B speed

# LED's
LED1 = Pin(22, Pin.OUT)  # LED for Motor A

# Direction control
IN1 = Pin(26, Pin.OUT)
IN2 = Pin(27, Pin.OUT)
IN3 = Pin(14, Pin.OUT)
IN4 = Pin(12, Pin.OUT)

vel = 100

def set_motor(speed, en, in1, in2):
    en.duty(speed)
    if speed > 0:
        in1.value(1)
        in2.value(0)
    else:
        in1.value(0)
        in2.value(1)

def forward(vel):
    set_motor(vel, ENA, IN1, IN2)
    set_motor(vel, ENB, IN3, IN4)

def reverse(vel):
    set_motor(-vel, ENA, IN1, IN2)
    set_motor(-vel, ENB, IN3, IN4)

def left(vel):
    set_motor(-vel, ENA, IN1, IN2)
    set_motor(vel, ENB, IN3, IN4)

def right(vel):
    set_motor(vel, ENA, IN1, IN2)
    set_motor(-vel, ENB, IN3, IN4)

def Stop():
    ENA.duty(0)
    ENB.duty(0)
    IN1.value(0)
    IN2.value(0)
    IN3.value(0)
    IN4.value(0)

graph = {
    # Top row
    'A': [('E', 1, 2)], 
    'B': [('F', 1, 2)],
    'C': [('G', 1, 2)],
    'D': [('H', 1, 2)],
    
    # Entry lines
    'E': [('A', 1, 0), ('F', 1, 1), ('M', 5, 2)],
    'F': [('B', 1, 0), ('G', 1, 1), ('E', 1, 3)],
    'G': [('C', 1, 0), ('H', 1, 1), ('F', 1, 3)],
    'H': [('D', 1, 0), ('I', 2, 1), ('G', 1, 3)],
    
    #Right quarter
    'I': [('J', 5, 1), ('K', 3, 2), ('H', 2, 3)],
    'J': [('L', 3, 2), ('I', 5, 3)],
    'K': [('I', 3, 0), ('L', 5, 1), ('N', 2, 2)],
    'L': [('J', 3, 0), ('O', 2, 2), ('K', 5, 3)],

    # Middle
    'M': [('E', 5, 0), ('N', 5, 1), ('P', 2, 2)],
    'N': [('K', 2, 0), ('O', 5, 1), ('Q', 2, 2), ('M', 5, 3)],
    'O': [('L', 2, 0), ('W', 5, 2), ('N', 5, 3)],
    'P': [('M', 2, 0), ('Q', 5, 1), ('R', 3, 2)],
    'Q': [('N', 2, 0), ('S', 3, 2), ('P', 5, 3)],
    
    #Left quarter
    'R': [('P', 3, 0), ('S', 5, 1)],
    'S': [('Q', 3, 0), ('T', 2, 1), ('R', 5, 3)],

    # Entry lines
    'T': [('U', 1, 1), ('X', 1, 2), ('S', 2, 3)],
    'U': [('V', 1, 1), ('Y', 1, 2), ('T', 1, 3)],
    'V': [('W', 1, 1), ('Z', 1, 2), ('U', 1, 3)],
    'W': [('O', 5, 0), ('ZZ', 1, 2), ('V', 1, 3)],
    
    #Bottom row
    'X': [('T', 1, 0)],
    'Y': [('U', 1, 0)],
    'Z': [('V', 1, 0)],
    'ZZ': [('W', 1, 0)],
}
def dijkstra(graph, start, goal):
    shortest_distance = {node: float('inf') for node in graph}
    shortest_distance[start] = 0
    predecessor = {}
    unvisited = set(graph.keys())
    while unvisited:
        current = min((node for node in unvisited), key=lambda n: shortest_distance[n])
        if current == goal:
            break
        unvisited.remove(current)
        for neighbor, cost, _ in graph[current]:
            distance = shortest_distance[current] + cost
            if distance < shortest_distance[neighbor]:
                shortest_distance[neighbor] = distance
                predecessor[neighbor] = current
    path = []
    current = goal
    while current != start:
        if current not in predecessor:
            return []
        path.insert(0, current)
        current = predecessor[current]
    path.insert(0, start)
    return path

def get_turn(current_node, next_node, robot_heading):
    for neighbor, cost, node_to_node_direction in graph[current_node]:
        if neighbor == next_node:
            rel_turn = (node_to_node_direction - robot_heading) % 4
            return rel_turn , node_to_node_direction


        
#--- Path preparation ---
goal_node = 'E'  # Example goal node
start_node = 'T'  # Example start node

states = ['forward', 'forward_bit', 'swing_right', 'swing_left', 'turn_right', 'turn_left', 'stop']
current_state = 'forward'



path = dijkstra(graph, start_node, goal_node)

path_index = 0
current_node = path[path_index]
next_node = path[path_index + 1]
print("[PATH FOUND]", path)

Stop()
# Main loop for line following
straightahead = True
if straightahead == False:
    while True:

        ##################   See   ###################

        WaveShaker = read_sensors()  # returns 5 sensor values now
        Far_left, left_mid, center, right_mid, Far_right = WaveShaker
        message = (Far_left, left_mid, center, right_mid, Far_right)  # For debugging

        ################## Think ###################

        THRESHOLD = 2500 

        left_black = Far_left < THRESHOLD
        left_mid_black = left_mid < THRESHOLD
        center_black = center < THRESHOLD
        right_mid_black = right_mid < THRESHOLD
        right_black = Far_right < THRESHOLD

        #swinging left or right based on sensor readings
        print("Sensors:", Far_left, left_mid, center, right_mid, Far_right)  # Debug print
        if center_black or (right_mid_black and not right_black) or (left_mid_black and not left_black):
            current_state = 'forward'
        elif not center_black and (left_mid_black or left_black):
            current_state = 'swing_left'
        elif not center_black and (right_mid_black or right_black):
            current_state = 'swing_right'
        else:
            Stop()

        # Sleep to allow sensor reading update
        time.sleep(0.05)

            
        if sum([left_black, left_mid_black, center_black, right_mid_black, right_black]) >= 3:

        # Only trigger once per node
            print("Node is detected")
                
            #if just_replanned:
            #   just_replanned = False
            #else:
            #   
                
            #Changing variables to new current node and next node
            if path[path_index] == goal_node:
                print("Goal reached!")
                Stop()
                while True:
                    time.sleep(1)
            
            current_node = path[path_index]
            next_node = path[path_index + 1]
            rel_turn, new_heading = get_turn(current_node, next_node, robot_heading)
            path_index += 1
            
            print(f"[Move] From: {current_node}, To: {next_node}, Heading: {rel_turn}")
            if rel_turn == 0:
                current_state = 'forward_bit'
            elif rel_turn == 1:
                current_state = 'turn_right'
            elif rel_turn == 2:
                current_state = 'turn_back'
            elif rel_turn == 3:
                current_state = 'turn_left'
            robot_heading = new_heading
                
    ################## Act ###################
        if current_state == 'forward':
            forward(200)
            LED1.value(1)  # Turn on LED for Motor A
            LED1.value(0)  # Turn off LED for Motor A
        elif current_state == 'swing_left':
            print("Swinging left")
            left(100)
        elif current_state == 'swing_right':
            print("Swinging right")
            right(100)
        elif current_state == 'turn_left':
            left(150)
            print("Going left")
            time.sleep(1.5)
            forward(200)
            time.sleep(0.5)
            current_state = 'forward'
        elif current_state == 'turn_right':
            print("Going right")
            right(100)
            time.sleep(1.5)
            forward(200)
            time.sleep(0.5)
            current_state = 'forward'
        elif current_state == 'forward_bit':
            forward(200)
            print("Going bit_forward")
            time.sleep(0.3)
            current_state = 'forward'
            
        time.sleep(0.05)
else:
    forward(200)
    LED1.value(1)  # Turn on LED for Motor A