from machine import Pin, PWM
import time
from WaveShaker import *

# Motor setup
freq = 1000
left_motor = PWM(Pin(26), freq=freq)
left_motor_back = PWM(Pin(27), freq=freq)
right_motor = PWM(Pin(12), freq=freq)
right_motor_back = PWM(Pin(14), freq=freq)

# --- Movement logic ---
robot_heading = 0  # 0: North, 1: East, 2: South, 3: West
#gs_sensor_pin = [
#    Pin(15, Pin.IN),  # Left
#    Pin(2, Pin.IN),  # Left mid
#    Pin(4, Pin.IN),  # Middle
#    Pin(16, Pin.IN),  # Right mid
#    Pin(17, Pin.IN)   # Right
#]

#goals
goals = ['A', 'B', 'C', 'D']  # The sequence of goals
goal_index = 0

#--- Path preparation ---
start_node = 'T'  # The robot's initial starting node
goal_node = goals[goal_index] # Set the first goal from the list

def goal_selector(_):
    global goal_index, goals
    goal = goals[goal_index]
    goal_index = (goal_index + 1) % len(goals)
    return goal

def set_speed(pwm, duty):
    pwm.duty(duty)

def forward(vel=500): 
    set_speed(left_motor, vel)
    set_speed(left_motor_back, 0)
    set_speed(right_motor, vel)
    set_speed(right_motor_back, 0)

def left(vel=500):
    set_speed(left_motor, 0)
    set_speed(left_motor_back, vel)
    set_speed(right_motor, vel)
    set_speed(right_motor_back, 0)

def right(vel=500):
    set_speed(left_motor, vel)
    set_speed(left_motor_back, 0)
    set_speed(right_motor, 0)
    set_speed(right_motor_back, vel)

def reverse(vel=500):
    set_speed(left_motor, 0)
    set_speed(left_motor_back, vel)
    set_speed(right_motor, 0)
    set_speed(right_motor_back, vel)

def Stop():
    set_speed(left_motor, 0)
    set_speed(left_motor_back, 0)
    set_speed(right_motor, 0)
    set_speed(right_motor_back, 0)

graph = {
    # Top row
    'A': [('E', 1, 2)], 
    'B': [('F', 1, 2)],
    'C': [('G', 1, 2)],
    'D': [('H', 1, 2)],
    
    # Entry lines
    'E': [('A', 1, 0), ('F', 1, 1), ('M', 5, 2)],
    'F': [('B', 1, 0), ('G', 1, 1), ('E', 1, 3)],
    'G': [('C', 1, 0), ('H', 1, 1), ('F', 1, 3)],
    'H': [('D', 1, 0), ('I', 2, 1), ('G', 1, 3)],
    
    #Right quarter
    'I': [('J', 5, 1), ('K', 3, 2), ('H', 2, 3)],
    'J': [('L', 3, 2), ('I', 5, 3)],
    'K': [('I', 3, 0), ('L', 5, 1), ('N', 2, 2)],
    'L': [('J', 3, 0), ('O', 2, 2), ('K', 5, 3)],

    # Middle
    'M': [('E', 5, 0), ('N', 5, 1), ('P', 2, 2)],
    'N': [('K', 2, 0), ('O', 5, 1), ('Q', 2, 2), ('M', 5, 3)],
    'O': [('L', 2, 0), ('W', 5, 2), ('N', 5, 3)],
    'P': [('M', 2, 0), ('Q', 5, 1), ('R', 3, 2)],
    'Q': [('N', 2, 0), ('S', 3, 2), ('P', 5, 3)],
    
    #Left quarter
    'R': [('P', 3, 0), ('S', 5, 1)],
    'S': [('Q', 3, 0), ('T', 2, 1), ('R', 5, 3)],

    # Entry lines
    'T': [('U', 1, 1), ('X', 1, 2), ('S', 2, 3)],
    'U': [('V', 1, 1), ('Y', 1, 2), ('T', 1, 3)],
    'V': [('W', 1, 1), ('Z', 1, 2), ('U', 1, 3)],
    'W': [('O', 5, 0), ('ZZ', 1, 2), ('V', 1, 3)],
    
    #Bottom row
    'X': [('T', 1, 0)],
    'Y': [('U', 1, 0)],
    'Z': [('V', 1, 0)],
    'ZZ': [('W', 1, 0)],
}
def dijkstra(graph, start, goal):
    shortest_distance = {node: float('inf') for node in graph}
    shortest_distance[start] = 0
    predecessor = {}
    unvisited = set(graph.keys())
    while unvisited:
        current = min((node for node in unvisited), key=lambda n: shortest_distance[n])
        if current == goal:
            break
        unvisited.remove(current)
        for neighbor, cost, _ in graph[current]:
            distance = shortest_distance[current] + cost
            if distance < shortest_distance[neighbor]:
                shortest_distance[neighbor] = distance
                predecessor[neighbor] = current
    path = []
    current = goal
    while current != start:
        if current not in predecessor:
            return []
        path.insert(0, current)
        current = predecessor[current]
    path.insert(0, start)
    return path

def get_turn(current_node, next_node, robot_heading):
    for neighbor, cost, node_to_node_direction in graph[current_node]:
        if neighbor == next_node:
            rel_turn = (node_to_node_direction - robot_heading) % 4
            return rel_turn , node_to_node_direction
        
def replan(path, path_index, graph, goal_selector):

    if path_index > 0:
        path_index -= 1
        current_node = path[path_index]
    else:
        print("[WARN] Already at the beginning of path.")
        current_node = path[0]

    new_goal = goal_selector(current_node)

    new_path = dijkstra(graph, current_node, new_goal)
    new_path_index = 0
    next_node = new_path[1] if len(new_path) > 1 else current_node

    return new_path, new_path_index, current_node, next_node


def setup_pins(Pin):
    IN1 = Pin(14, Pin.OUT)
    IN2 = Pin(27, Pin.OUT)
    IN3 = Pin(26, Pin.OUT)
    IN4 = Pin(25, Pin.OUT)
    switch_pin = Pin(12, Pin.IN, Pin.PULL_DOWN)
    magnet_pin = Pin(13, Pin.OUT)
    magnet_pin.value(0)
    release_switch_pin = Pin(33, Pin.IN, Pin.PULL_DOWN)
    reverse_trigger_pin = Pin(32, Pin.IN, Pin.PULL_DOWN)
    return IN1, IN2, IN3, IN4, switch_pin, magnet_pin, release_switch_pin, reverse_trigger_pin

fullstep_seq = [
    [1, 1, 0, 0],
    [0, 1, 1, 0],
    [0, 0, 1, 1],
    [1, 0, 0, 1]
]
STEPS_PER_REV = 2048

def step_motor(IN1, IN2, IN3, IN4, steps, delay_ms=2, direction=1):
    pins = [IN1, IN2, IN3, IN4]
    seq_len = len(fullstep_seq)
    seq_index = 0

    for _ in range(steps):
        for pin, val in zip(pins, fullstep_seq[seq_index]):
            pin.value(val)
        seq_index = (seq_index + direction) % seq_len
        time.sleep_ms(delay_ms)

    for pin in pins:
        pin.value(0)

def rotate(IN1, IN2, IN3, IN4, rotations, delay_ms=2, direction=1):
    total_steps = int(rotations * STEPS_PER_REV)
    step_motor(IN1, IN2, IN3, IN4, total_steps, delay_ms, direction)

def forward_process(IN1, IN2, IN3, IN4, switch_pin, magnet_pin, release_switch_pin, rotation_sequence, press_count):
    rotations = rotation_sequence[press_count % len(rotation_sequence)]
    print("Rotations this cycle:", rotations)

    if (press_count % len(rotation_sequence)) == 3:
        print("4th press â†’ magnet ON until released")
        magnet_pin.value(1)
        print("Magnet ON. Waiting for release signal...")
        while release_switch_pin.value() == 0:
            time.sleep_ms(50)
        stable_count = 0
        while stable_count < 5:
            if release_switch_pin.value() == 1:
                stable_count += 1
            else:
                stable_count = 0
            time.sleep_ms(10)
        magnet_pin.value(0)
        print("Magnet OFF after release condition.")
        return True  # Enter reverse mode
    else:
        magnet_pin.value(1)
        print("Magnet ON.")
        time.sleep(1)
        rotate(IN1, IN2, IN3, IN4, rotations=rotations, delay_ms=5, direction=-1)
        print("Forward rotation done.")
        magnet_pin.value(0)
        print("Magnet OFF.")
        rotate(IN1, IN2, IN3, IN4, rotations=rotations, delay_ms=5, direction=1)
        print("Backward rotation done.")
        return False

def reverse_process(IN1, IN2, IN3, IN4, magnet_pin, reverse_trigger_pin, reverse_sequence, reverse_press_count):
    if reverse_press_count < len(reverse_sequence):
        rotations = reverse_sequence[reverse_press_count]
        print("Reverse cycle", reverse_press_count + 1)
        print("Rotations:", rotations)
        rotate(IN1, IN2, IN3, IN4, rotations=rotations, delay_ms=5, direction=1)
        print("Reverse backward done.")
        magnet_pin.value(1)
        print("Magnet ON in reverse cycle.")
        time.sleep(1)
        rotate(IN1, IN2, IN3, IN4, rotations=rotations, delay_ms=5, direction=-1)
        print("Reverse forward done.")
        magnet_pin.value(0)
        print("Magnet OFF in reverse cycle.")
        while reverse_trigger_pin.value() == 1:
            time.sleep_ms(50)
        return reverse_press_count + 1, False
    else:
        print("Reverse sequence complete.")
        print("Resetting system for next forward cycle.")
        return 0, True

def Box_pickup(Pin):
    IN1, IN2, IN3, IN4, switch_pin, magnet_pin, release_switch_pin, reverse_trigger_pin = setup_pins(Pin)
    rotation_sequence = [4, 3, 2, 1]
    reverse_sequence = [2, 3, 4]
    press_count = 0
    reverse_press_count = 0
    reverse_mode = False

    print("System ready.")

    while True:
        # Forward Mode
        if switch_pin.value() == 1 and not reverse_mode:
            print("Forward button pressed.")
            reverse_mode = forward_process(
                IN1, IN2, IN3, IN4, switch_pin, magnet_pin, release_switch_pin, rotation_sequence, press_count
            )
            press_count += 1
            while switch_pin.value() == 1:
                time.sleep_ms(50)

        # Reverse Mode
        if reverse_mode:
            reverse_trigger = reverse_trigger_pin.value() == 1
            if reverse_trigger:
                reverse_press_count, reset = reverse_process(
                    IN1, IN2, IN3, IN4, magnet_pin, reverse_trigger_pin, reverse_sequence, reverse_press_count
                )
                if reset:
                    reverse_mode = False
                    press_count = 0
                    reverse_press_count = 0

        time.sleep_ms(50)


states = ['forward', 'forward_bit', 'swing_right', 'swing_left', 'turn_right', 'turn_left', 'stop']
current_state = 'forward'



path = dijkstra(graph, start_node, goal_node)

path_index = 0

print("[PATH FOUND]", path)

Stop()
# Main loop for line following
while True:

    ##################   See   ###################

    WaveShaker = read_sensors()

    far_left, left_val, center, right_val, far_right = WaveShaker[0], WaveShaker[1], WaveShaker[2], WaveShaker[3], WaveShaker[4]  # '0' means black line detected
    message = (far_left, left_val, center, right_val, far_right) # For debugging purposes
    ################## Think ###################

    
        
    print(left_val, left_val, center, right_val, right_val)

    if center == 0 or (right_val == 0 and far_right == 1) or (left_val == 0 and far_left == 1):
        current_state = 'forward'
    elif center == 1 and (left_val == 0 or far_left == 0):
        current_state = 'swing_left'
        left(500)
    elif center == 1 and (right_val == 0 or far_right == 0):
        current_state = 'swing_right'
        right(500)
    else:
        Stop()
        
    if [far_left, left_val, center, right_val, far_right].count(0) >= 3:
    # Only trigger once per node
        print("Node is detected")
            
        # This block handles reaching a goal and replanning using your reverse logic.
        if path_index >= len(path) - 1:
            # This condition means we have arrived at the current goal_node.
            print(f"Goal '{goal_node}' reached!")
            Stop()
            
            # --- Pick the next goal ---
            goal_index = (goal_index + 1) % len(goals) # Cycle to next goal
            
            # The node BEFORE the goal becomes the new start point after reversing.
            start_node = path[path_index - 1] 
            goal_node = goals[goal_index] # Get the new goal
            
            print(f"New goal is '{goal_node}'. Reversing to node '{start_node}' to begin.")
            
            # --- Reverse until the previous node is detected ---
            reverse(500)
            while True:
                WaveShaker = read_sensors()
                if [WaveShaker[0], WaveShaker[1], WaveShaker[2], WaveShaker[3], WaveShaker[4]].count(0) >= 3:
                    print(f"Backed into previous node '{start_node}', resuming.")
                    Stop()
                    break
                time.sleep(0.05)
            
            # --- Plan the new path from the previous node ---
            path = dijkstra(graph, start_node, goal_node)
            path_index = 0 # Reset the index for the new path
            print("[NEW PATH]", path)
            
            if not path or len(path) <= 1:
                print("Path to next goal is empty. Halting.")
                current_state = 'stop' 
                while True: Stop() # Stop permanently

        # This part runs for every node, including the first step after a new plan
        current_node = path[path_index]
        next_node = path[path_index + 1]
        rel_turn, new_heading = get_turn(current_node, next_node, robot_heading)
        path_index += 1 # Increment index for the next segment
        
        print(f"[Move] From: {current_node}, To: {next_node}, Heading: {rel_turn}")
        if rel_turn == 0:
            current_state = 'forward_bit'
        elif rel_turn == 1:
            current_state = 'turn_right'
        elif rel_turn == 2:
            current_state = 'turn_back'
        elif rel_turn == 3:
            current_state = 'turn_left'
        robot_heading = new_heading
            
################## Act ###################
    if current_state == 'forward':
        forward(700)
    elif current_state == 'swing_left':
        print("Swinging left")
        left(500)
    elif current_state == 'swing_right':
        print("Swinging right")
        right(500)
    elif current_state == 'turn_left':
        left(600)
        print("Going left")
        time.sleep(1.5)
        forward(500)
        time.sleep(0.5)
        
        current_state = 'forward'
    elif current_state == 'turn_right':
        print("Going right")
        right(600)
        time.sleep(1.5)
        forward(500)
        time.sleep(0.5)
        current_state = 'forward'
    elif current_state == 'forward_bit':
        forward(500)
        print("Going bit_forward")
        time.sleep(0.3)
        current_state = 'forward'
    elif current_state == 'Goal reached':
        # This state is no longer used, as the goal logic is now
        # handled entirely within the 'Think' section above.
        Stop()
        time.sleep(0.3)
        path, path_index, current_node, next_node = replan(
            path, path_index, graph, goal_selector
        )
        print("[NEW PATH]", path)
        reverse(500)
        # Wait until line sensors detect the next node
        while True:
            WaveShaker = read_sensors()
            far_left, left_val, center, right_val, far_right = WaveShaker
            if [far_left, left_val, center, right_val, far_right].count(0) >= 3:
                print("Backed into previous node, resuming")
                break
            time.sleep(0.05)
        current_state = 'forward'
        
    time.sleep(0.05)